env: flex
runtime: custom
entrypoint: npm run start:prod

# Recursos asignados
resources:
  cpu: 2
  memory_gb: 5
  disk_size_gb: 10

# Conexión a la red VPC (sin vpc_access_connector, ya que no es compatible con flex)
network:
  name: default  # Asegúrate de que sea la red correcta

# Configuración de escalado automático
automatic_scaling:
  min_num_instances: 1
  max_num_instances: 10

# Variables de entorno
env_variables:
  NODE_ENV: 'production'
  PROD_JWT_SECRET_KEY: 'shida17_prod'
  CLOUD_SQL_CONNECTION_NAME: 'nest-crud-jwt-swagger-gcp:us-central1:biblioteca-instancia'  # Correcto
  DATABASE_PORT: '3306'
  DATABASE_USER: 'root'
  DATABASE_PASSWORD: 'shida17'
  DATABASE_NAME: 'biblioteca'

# Verificación de salud
liveness_check:
  path: "/api/v1/health"
  check_interval_sec: 30         # Incremento del tiempo entre verificaciones (default es 5s)
  timeout_sec: 20                # Incremento del tiempo de espera de la verificación (default es 4s)
  failure_threshold: 5           # Incremento de umbral de fallos (default es 2)
  success_threshold: 2

# Verificación de disponibilidad (readiness)
readiness_check:
  path: "/api/v1/health"
  check_interval_sec: 30         # Intervalo de verificación de disponibilidad
  timeout_sec: 20                # Tiempo de espera por cada verificación de disponibilidad
  failure_threshold: 5
  success_threshold: 2

# Verificación de inicio
health_check:
  path: "/api/v1/health"
  check_interval_sec: 30         # Aumento en el tiempo entre intentos de verificación de inicio
  timeout_sec: 20                # Tiempo máximo de espera por intento de verificación
  failure_threshold: 5           # Número de intentos fallidos antes de marcar el despliegue como fallido
  success_threshold: 2           # Número de verificaciones exitosas antes de marcar como listo
  initial_delay_sec: 120         # Retraso inicial para esperar más tiempo antes de la primera verificación
